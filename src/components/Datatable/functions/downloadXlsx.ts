// types
import type { DatatableProps } from '../@types'
import type YajraDatatable from '@/types/yajra-datatable-response'
// vendors
import type { DataTableState } from 'mui-datatable-delight'
import dayjs from 'dayjs'
import axios from '@/lib/axios'
import { utils, writeFileXLSX } from 'xlsx'
// utils
import formatToDatatableParams from '../utils/formatToDatatableParams'
// etc
import packageJson from '@/../package.json'

export default async function downloadXlsx<T>(
    apiUrl: DatatableProps<T>['apiUrl'],
    apiUrlParams: DatatableProps<T>['apiUrlParams'] | undefined,
    tableState: DataTableState<T>,
    filename: string,
) {
    const headerCols = tableState.columns.filter(col => col.download)

    return await axios
        .get<YajraDatatable<object>>(apiUrl, {
            params: {
                ...apiUrlParams,
                ...formatToDatatableParams({
                    ...tableState,
                    columns: headerCols,
                }),
                start: 0,
                length: undefined,
            },
        })
        .then(({ data }) => {
            const data_aoa = data.data.map((row, i) =>
                headerCols.map((col, j) => {
                    const { customBodyRender } = col
                    const value = row[col.name as keyof typeof row]

                    if (typeof value === 'number') {
                        return value
                    }

                    const renderResult = customBodyRender?.(
                        value,
                        i,
                        j,
                        tableState,
                        () => {},
                    )

                    if (renderResult) {
                        if (typeof renderResult === 'string') {
                            return renderResult
                        }
                    }

                    return value
                }),
            )

            const workbook = utils.book_new()
            const worksheet = utils.aoa_to_sheet([
                headerCols.map(col => col.label ?? col.name),
                ...data_aoa,
            ])
            utils.book_append_sheet(workbook, worksheet)

            writeFileXLSX(workbook, filename, {
                Props: {
                    Author: process.env.NEXT_PUBLIC_APP_NAME,
                    Comments: `Auto generated by ${process.env.NEXT_PUBLIC_APP_NAME} v${packageJson.version} at ${dayjs().format('YYYY-MM-DD HH:mm:ss')}`,
                    CreatedDate: new Date(),
                },
            })
        })
}
